# Tutorial: Styling the content of your website with Bootstrap
In this tutorial, we will use a front-end/CSS framework called [Bootstrap](https://getbootstrap.com/), one of the most popular frameworks for styling websites. 
We will use Bootstrap for two reasons:
1. Bootstrap makes it faster to style a webpage
2. Bootstrap allows you to build responsive websites and applications

In this tutorial, you will find several links to [Bootstrap official documentation](https://getbootstrap.com/docs/5.3/getting-started/introduction/) in each task. This tutorial's main purpose is to familiarize yourself with the Bootstrap documentation and apply Bootstrap pre-defined CSS classes to style your website.

### Download the resources

We will work with a design inspired in the [New Age](https://startbootstrap.com/previews/new-age) template from the [Start Bootstrap](https://startbootstrap.com/) website. Download the base code from [here]().

## The business case: Café con Causa (Coffee with a Cause)

Café con Causa (Coffee with a Cause) is a nonprofit organization in Guatemala that commercializes Guatemalan coffee to generate resources that create and sustain educational projects in the country's rural communities. Café con Causa provides a commercial platform that involves small producers who grow and harvest coffee. Café con Causa purchases the coffee at a fair price and commercializes it with Guatemala's individuals and companies. All the profits generated by product sales are donated to community schools in the rural areas to promote education for children and youth.

Café con Causa has been a success in Guatemala. Café con Causa has drawn the attention of dozens of companies in the country, from the smallest to the largest in the country, who believe in the causes promoted by the nonprofit. From the success in Guatemala, the CEO of Café con Causa recognized a growth opportunity in the United States to expand Café con Causa's customer base and take the development of community schools in rural Guatemala to new heights. 

We will take the initiative to promote the expansion of Café con Causa in Guatemala as a context for this tutorial. *We will build a website that emphasizes the causes promoted by Café con Causa and the organization's need to project an honest and open image to its potential customers, given its status as a nonprofit organization.* 

We will use the following text to complete the tasks below:

> ***Page title:*** Café con Causa
>
> ***Welcome blurb:*** We commercialize Guatemalan coffee to generate resources that create and sustain educational projects in the rural communities of the country.
>
> **Transparency (section)**
>
> We believe in the importance of being transparent in everything we do by providing you with information on costs, expenses, earnings and impact data.
>
> **Production costs (subsection)**
>
> Thanks to alliances with our suppliers who believed in the project, we managed to have a production cost of $2.34 per unit.
>
> **Expenses Reloaded (subsection)**
>
> Transportation and administration expenses as well as 17% on tax expenditure represent only $1.49 per each bag of coffee.
>
> **Profits (subsection)** 
> 
> With a sales price of $9.00, we generate a profit of $4.77 per unit, which is entirely invested on educational projects.
>
> **Frequently Asked Questions (section)**
>
> - How much does a pound of coffee cost?
> - How can I make an order?
> - How can I place an order from the United States?

## Part I: Basic Bootstrap 

## Task 1: Installing Bootstrap
Reference: [Bootstrap Docs > Introduction](https://getbootstrap.com/docs/5.3/getting-started/introduction/)

The easiest way to add Bootstrap to your website is using the content delivery network (CDN) servers recommended by Boostrap. Other ways of using Bootstrap require downloading the source files, which allows higher customization.

We will use the CDN resources:
- Include the CSS resource into the \<head\> element
- Include the JavaScript resource right before the closing body tag (</body>)
- You also need to include a [responsive meta tag](https://developer.mozilla.org/en-US/docs/Web/HTML/Viewport_meta_tag) which ensures proper rendering of your webpage on mobile devices. This is necessary because Bootstrap automatically optimizes your code for mobile devices.

Put it all together and your webpage should look like this:
```html
<!doctype html>
<html lang="en">
    <head>
    ...
       
        <!-- Responsive metatag -->    
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Bootstrap CSS -->
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    </head>
    <body>
        ...
        <!-- Bootstrap JavaScript -->
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
  </body>
</html>       
```

> Learn more about the [integrity \(subresource integrity\)](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity) and [crossorigin](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin) attributes.

## Task 2: Styling text content

### Reboot: [Bootstrap Docs > Content > Reboot](https://getbootstrap.com/docs/5.3/content/reboot/)

When you start using Bootstrap out of the box, it applies a reboot of the default browser styles. This means Bootstrap strips out all the default styles like margin, padding, font styles, and size, replacing them with a clean and basic set of default Bootstrap styles. The purpose of this reboot is to resolve inconsistencies across browsers and provide you with a simple baseline to build upon the style of your website that is consistent across browsers.  

### Typography: [Bootstrap Docs > Content > Typography](https://getbootstrap.com/docs/5.3/content/typography/)

Bootstrap also provides several features for styling text content that allow you to create customized headings, paragraphs, and lists.

The feature [display headings](https://getbootstrap.com/docs/5.3/content/typography/#display-headings) allows you to display your headings in a larger, slightly more prominent style.

Add "display-2" to h1, "display-5" to h2 elements:

```html
<h1 class="display-1">...</h1>
<h2 class="display-5">...</h2>
```
> Note the display headings classes use a numbering independent of the HTML heading elements. The display headings classes can be used with any HTML element.

The feature [lead](https://getbootstrap.com/docs/5.3/content/typography/#lead) allows you to make paragraphs stand out. We can use this feature for the first paragraph on our website to make it look slightly bigger and relevant than the rest of the paragraphs.

Apply the *lead* class to the paragraphs in the header and transparency sections:

```html
<p class="lead">
    ...
</p>
```

## Task 3: Styling images content

Reference: [Bootstrap Docs > Content > Images](https://getbootstrap.com/docs/5.3/content/images/)

Images in Bootstrap are made responsive with the *.img-fluid* class. Add this class to the images on website's header and FAQ sections:

```html    
<img src="..." class="img-fluid" ...>
...
```

Notes:
- Adding responsive behavior usually involves adjusting the [max-width](https://www.w3schools.com/cssref/pr_dim_max-width.asp) CSS property of HTML elements. This property defines the maximum width of an element's content and it prevents the element from becoming larger than the value specified by max-width.
- img-fluid maintains a 100% max-width regardless of the size of the screen, so images never become larger than their parent elements (containers). As a result, images are resized to fit the screen.
 
## Task 4: Class utilities for text

### Text: [Bootstrap Docs > Utilities > Text](https://getbootstrap.com/docs/5.3/utilities/text/)

Bootstrap provides common text utilities to control weight, alignment, and other aspects.

Using [font weight](https://getbootstrap.com/docs/5.3/utilities/text/#font-weight-and-italics) classes, control the style of the Start link on the navigation menu:

```html
<a class="fw-bold" href="#page-top">Start</a>
```

Using [text alignment](https://getbootstrap.com/docs/5.3/utilities/text/#text-alignment) classes, center the  content of the transparency and footer sections:

```html
<div class="text-center">
    <h2>...</h2>
    <p>..</p>
</div>

<footer class="text-center">
    ...
</footer>
```
Notes:
- Text alignment classes also include *text-start* for aligning text to the left and *text-end* for aligning text to the right. 
- Since we want to center the content of the entire transparency section (heading and paragraph), we wrap all the elements in the section in a *div* element. Then, we apply the *text-center* class to this div element.

## Task 5: Class utilities for colors

Reference: [Bootstrap Docs > Utilities > Colors](https://getbootstrap.com/docs/5.3/utilities/colors/)

Color utilities include predefined classes to colorize text. Change the background color to black and text color to white of the footer's content using the following classes:
- bg-black 
- text-white

Bootstrap enables more comprehensive customization for working with colors. For now, we will use the default [color system](https://getbootstrap.com/docs/5.3/customize/color/). You can also use this system for defining [background colors](https://getbootstrap.com/docs/5.3/utilities/background/) of any HTML element.

## Task 7: Class utilities for spacing

Reference: [Bootstrap Docs > Utilities > Spacing](https://getbootstrap.com/docs/5.3/utilities/spacing/)

Spacing utilities provide a [notation](https://getbootstrap.com/docs/5.3/utilities/spacing/#notation) to specify a wide range of shorthand classes related to margin and padding. These shorthand classes follow the syntax {property}{sides}-{size} to set specific values of margin and padding.

Add a gap between the transaprency section and header sections. following the lead paragraph by adding a vertical margin. Since we want to add a margin to the entire section (title and paragraph), we wrap all the elements in the section in a *div* element that acts as a container. Then, we apply the spacing shorthand class.

Add the *div* container to the "Local Communities" and "Activities" sections:

```html
<main class="mt-5">
    <h2 class="display-5">...</h2>
    <p>
        ...
    </p>
</section>
```

Note that *my-5* follows the notation {property}{sides}-{size} where
- {property} is *m* (margin)
- {sides} is *y* (vertical)
- {size} is *4*

## Task 8: Creating buttons

Reference: https://getbootstrap.com/docs/5.3/components/buttons/

Bootstrap includes several predefined button styles. Add a "Book here" button in each guided visit using the *btn* class:

```html
<a class="btn btn-primary btn-sm" href="javascript:void(0)">Book here</a>
```
> This button also specifies color and size.

## Task 9: Adding icons
Reference: https://icons.getbootstrap.com/

Finally, try out Bootstrap Icons library for adding icons to your webpage. To use Bootstrap icons library, you need to add the corresponding CSS resource into the \<head\> tag:

```html
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.4/font/bootstrap-icons.css">
```

Remember we adjusted the color of the warning statement in the first guided visit option? Add an exclamation icon to increase the attention of the viewer:

```html
<i class="bi-exclamation-triangle"></i>
```
>Icons are also a great way to make your content more accessible for people with color blindness.

Final result:
```html
Cross the four kilometres in a kayak guided by a local guide. <strong class="text-warning fw-bold"><i class="bi-exclamation-triangle"></i> This guided visit is physically demanding, and we recommend it for only those in excellent physical condition.</strong>
```

## Part II: Content Panels

## Task 10: [Slider](https://getbootstrap.com/docs/5.3/components/carousel/)

A slider positions a series of images next to each other but only shows one at a time. The images then slide from one to the next. In bootstrap, the slider is called carousel.

The following slider provides buttons that allow users to navigate between each of the slides:

```html
<!-- Slider -->
<div id="carousel-films" class="carousel slide" data-bs-ride="carousel">
    <div class="carousel-inner">
        <div class="carousel-item active">
            <img src="assets/img/placeholder.png" class="d-block w-100" alt="...">
        </div>
        <div class="carousel-item">
            <img src="assets/img/placeholder.png" class="d-block w-100" alt="...">
        </div>
        <div class="carousel-item">
            <img src="assets/img/placeholder.png" class="d-block w-100" alt="...">
        </div>
    </div>
    <!-- Slider controls -->
    <button class="carousel-control-prev" type="button" data-bs-target="#carousel-films"
        data-bs-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#carousel-films"
        data-bs-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Next</span>
    </button> 
    </div>
</div>
<!-- End of Slider -->
```

> Create a slider using the Bootstrap carousel component. Replace the *placeholder.png* and *alt* with your content.

Notes:
- The *.active* class needs to be added to one of the slides; otherwise, the carousel will not be visible. 
- Also, use a unique id on the *.carousel* to allow controls (below)
- The *data-bs-ride* attribute controls the autoplay
- The carousel uses the *[d-block](https://getbootstrap.com/docs/4.0/utilities/display/)* and *[w-100](https://getbootstrap.com/docs/4.0/utilities/sizing/)* to ensure on carousel images to prevent browser default image alignment.

## Task 11: [Cards](https://getbootstrap.com/docs/5.3/components/card/)

Now, we will organize the content of the transparency using the Bootstrap cards component. A card acts as a content container that includes options for headers and footers. 

We will use the *article* element to create each card:

```html
<div class="my-4 justify-content-center">
<article class="card border-0">
    <img class="card-img-top" src="..." alt="...">
    <div class="card-body">
        <h4 class="card-title text-center">[TRANSPARENCY SUBSECTION]</h4>
        <p class="card-text">
            <p class="mb-2">
                [TRANSPARENCY SUBSECTION DESCRIPTION]
            </p>
        </p>
    </div>
</article>
```

> Create three cards with the content of the transparency section.

## Task : [Collapse](https://getbootstrap.com/docs/5.3/components/collapse/)

The transparency content may be made your webpage look saturated with too much text. We can display only a fragment of the content by default and allow the user to expand the rest.

We can use the collapse component to achieve this effect. Bootstrap uses a JavaScript plugin to show and hide content. Buttons or anchors are used as triggers that are mapped to specific elements you toggle. Collapsing an element will animate the height from its current value to 0.

Edit your cards content to show only one or two sentences and use the collapse component to hide the rest. Use Lorem ipsum text to hide the content:

```html
<article class="col-lg card border-0">
    <img class="card-img-top" src="..." alt="...">
    <div class="card-body">
        <h4 class="card-title text-center">[TRANSPARENCY SUBSECTION]</h4>
        <p class="card-text">
            <p class="mb-2">
                [TRANSPARENCY SUBSECTION DESCRIPTION]
            </p>
            <div class="mb-2">
                <button class="btn btn-primary btn-sm py-0" type="button" data-bs-toggle="collapse"
                    data-bs-target="#collapse-transparency-1" aria-expanded="false"
                    aria-controls="ollapse-transparency-1">
                    Read more
                </button>
            </div>
            <p class="collapse" id="collapse-transparency-1">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam euismod quam a ligula mollis imperdiet. Morbi rhoncus vehicula suscipit.
            </p>
        </p>
    </div>
</article>
```

> Note the collapse behavior relies on assigning an identifier to the content to be expanded (e.g., *ollapse-transparency-1*). This identifier also appears on some of the properties (e.g., *data-bs-target* and *aria-controls*) in the button element that triggers the collapsible behavior. This identifier should be unique. Thus, adding more than one card involves assigning different ids.

The collapse component uses different types of HTML attributes that are common across content panels components in Bootstrap:
- *data-bs-toggle*: data property that specifies collapsible behavior
- *data-bs-target*: data property that specifies the id of the element to be collapsed/shown
- *aria-expanded*: attribute that indicates whether the element is collapsed or expanded 
- *aria-controls*: attribute that creates a cause and effect relationship. It identifies the element(s) controlled by the current element when that relationship isn't represented elsewhere on the page. The more widely the two elements are separated on the page, the more useful the aria-controls attribute becomes.

The Bootstrap JavaScript plugin uses the data properties (*data-bs-target* and *data-bs-toggle*) to implement the collapsible behavior.

Both *aria-expanded* and *aria-controls* correspond to the [ARIA](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques) standard. These attributes only expose extra information to a browser's accessibility features and do not affect a page's internal structure.

## Task : [Accordion](https://getbootstrap.com/docs/5.3/components/accordion/)

The accordion comprises a collection of content organized as pairs of titles and panels. When you click on a title of an accordion, its corresponding panel expands to reveal the content.

```html
<!-- accordion -->
<div class="accordion" id="faq-content">
    <article class="accordion-item">
        <h2 class="accordion-header" id="heading-1">
            <button class="accordion-button" type="button" data-bs-toggle="collapse"
                data-bs-target="#faq-1" aria-expanded="true" aria-controls="faq-1">
                [FAQ 1]
            </button>
        </h2>
        <div id="faq-1" class="accordion-collapse collapse show" aria-labelledby="heading-1"
            data-bs-parent="#faq-content">
            <div class="accordion-body">
                <p>
                    [FAQ CONTENT]  
                </p>
            </div>
        </div>
    </article>
    <article class="accordion-item">
        <h2 class="accordion-header" id="heading-2">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                data-bs-target="#faq-2" aria-expanded="false" aria-controls="faq-2">
                [FAQ 2]
            </button>
        </h2>
        <div id="faq-2" class="accordion-collapse collapse" aria-labelledby="heading-2"
            data-bs-parent="#faq-content">
            <div class="accordion-body">
                <p>
                    [FAQ CONTENT] 
                </p>
            </div>
        </div>
    </article>
</div>
<!-- End of accordion -->
```

> Create one more accordion item. When creating your accordion, take the same considerations you took when using the collapse component, especially when assigning the identifiers for each item in your accordion.
>
> Also, note the first accordion item contains the *.show* class and *aria-expanded="true"*. The hidden items have *aria-expanded="false"* and their buttons have the class *.collapsed*.

## Task : [Modal Window](https://getbootstrap.com/docs/5.3/components/modal/)

Also known as pop-up, the modal window is content that appears "in front of" the rest of the page's content.

We will create a "Contact Us" [form](https://getbootstrap.com/docs/5.3/forms/overview/
) as a modal using Bootstrap modal component.

The template provided to you already contains, as part of the navigation bar, the button to trigger the modal window:

```html
<button class="btn btn-primary rounded-pill px-3 mb-2 mb-lg-0" data-bs-toggle="modal"
    data-bs-target="#feedbackModal">
    <span class="d-flex align-items-center">
        <i class="bi-chat-text-fill me-2"></i>
        <span class="small">Contact Us</span>
    </span>
</button>
```

The content for the modal window will typically sit within the page, but it is hidden when the page loads using CSS. Add the modal content at the bottom of the page:

```html
<!-- Feedback Modal-->
<div class="modal fade" id="feedbackModal" tabindex="-1" aria-labelledby="feedbackModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-gradient-primary-to-secondary p-4">
                <h5 class="modal-title font-alt text-white" id="feedbackModalLabel">Send feedback</h5>
                <button class="btn-close btn-close-white" type="button" data-bs-dismiss="modal"
                    aria-label="Close"></button>
            </div>
            <div class="modal-body border-0 p-4">
                <form>
                    <div class="form-group mb-4">
                        <label for="email" class="form-label">Email address:</label>
                        <input type="email" class="form-control" id="email" placeholder="Enter your email">
                    </div>
                    <div class="form-group mb-4">
                        <label for="name" class="form-label">Name:</label>
                        <input type="text" class="form-control" id="name" placeholder="Enter your name">
                    </div>
                    <div class="form-group mb-4">
                        <label for="comment" class="form-label">Comment:</label>
                        <textarea class="form-control" id="comment" rows="3"></textarea>
                    </div>
                    <div class="text-center">
                        <button class="btn btn-secondary rounded-pill btn-lg disabled w-100" id="submitButton" type="submit">Submit</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<!-- End of Feedback Modal-->
```

## Other Content Panels

Bootstrap also has available several other components to implement content panels:
- [Offcanvas](https://getbootstrap.com/docs/5.3/components/offcanvas/)
- [Dropdowns](https://getbootstrap.com/docs/5.3/components/dropdowns/)
- [Tabs](https://getbootstrap.com/docs/5.3/components/navs-tabs/)

## Part III: Bootstrap's Layout System 

## Task : Creating containers
Reference: [Bootstrap Docs > Layout > Containers](https://getbootstrap.com/docs/5.3/layout/containers/)

Features:
- Containers are the most basic layout element in Bootstrap and are required to use the grid system, which you will use in the next task to arrange your content in rows and columns.
- Containers allow you to wrap your page content and then apply padding around the content.
- They can also center your content on the page in a central column.

Use the default container which sets a fixed width for screen sizes.

```html
<main class="container">
```

### Breakpoints

Bootstrap containers allow you to tailor the content of your webpage to fit a specific screen size. To represent screen sizes, Bootstrap use the concept of breakpoints. [Breakpoints](https://getbootstrap.com/docs/5.3/layout/breakpoints/) are the building blocks of responsive design in Bootstrap. Bootstrap includes six default breakpoints:
- Extra Small < 576px
- Small (sm) >= 576px
- Medium (md) >= 768px
- Large (lg) >= 992px
- Extra large (xl) >= 1200px
- Extra extra large   (xxl) >= 1400px

Each breakpoint has a dimension associated that represents a particular viewport or device screen size. The breakpoints serve as a system to specify responsive behavior in HTML elements. For example, if you want to tailor your webpage to be displayed in *large* screens (i.e., 992 pixels width or wider), you can wrap the webpage's content into a *container-lg* class container:

Use containers for the top image and main heading inside the \<header\> element and the main content:
```html
<header>
    <div class="container">
        <h1>...</h1>
        <p>...</p>
    </div>
</header>
<main class="container">
    ...
</main>
```

## Task : Adjusting the layout
Reference: [Bootstrap Docs > Layout > Containers](https://getbootstrap.com/docs/5.3/layout/containers/)

[Bootstrap's grid layout system](https://getbootstrap.com/docs/5.3/layout/grid/) allows you to arrange content in columns and rows following a fully responsive design. The grid layout uses a twelve-column system which means the width of a single column can vary from one to twelve.

When arranging your content in columns using Bootstrap grid system, you need to use a combination of *col* classes wrapped inside a *row* class container. Furthermore, you can add breakpoints to create a grid system that starts out stacked and becomes horizontal at a given breakpoint.

Use the *col-lg* class to display the content of the website as two columns for large screens (*lg* breakpoint) and as one column for smaller screens:

```html
<section class="my-4 row">
    <article class="col-lg">
        ...
    </article>
    <article class="col-lg">
        ...
    </article>
</div>
```

> The code above specifies the behavior at and over the large (lg) breakpoint, i.e., display the content in two columns when screen size hits the large (lg) breakpoint.

Adjust the spacing between each \<article\> to add gaps both horiontally and vertically using padding (*p*) and margin (*m*) utilities:

Result:
```html
<section class="my-4 row">
    <article class="col-lg my-2 py-2 mx-lg-1 px-2 border border-secondary border-2">
        ...        
    </article>
    <article class="col-lg my-2 py-2 mx-lg-1 px-2 border border-secondary border-2">
        ...
    </article>
</div>
```

> Note that *my* and *py* adjust the vertical margin and padding of each article while *mx* and *px* adjust the horizontal margin and padding, respectively.

## Task : Adjusting the form

Adjust the contact form in a two-column grid. The heading and description of the form should be in the first column and the form in the second column. Make the first column narrower than the second column by varying the number of template columns in each column.

```html
<aside class="container">
    <div class="row align-items-center">
        <div class="col-lg-4"> 
            ...
        </div>
        <div class="col-lg-8"> 
            ...
        </div>
    </div>
</aside>
```

> Note that the content of the first column (heading and form's description) is also vertically centered due to the *align-items-center* class on the row container.

## Task : Adjusting the footer

Center the copyright notice on the page's footer:

```html
<footer class="text-center my-5 pt-3 border-top">...</footer>
```

> The [index.html](./index.html) file contains the final HTML document. You can view this webpage in GitHub Pages [here](https://josecarlosgt.github.io/Web-Design-and-Development/).
